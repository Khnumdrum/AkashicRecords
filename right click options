import tkinter as tk
from tkinter import ttk
from tkinter import Menu


class CodexNexusUI:
    """
    User Interface for Codex Nexus with diagnostics and scanner integration.
    """

    def __init__(self):
        self.root = tk.Tk()
        self.root.withdraw()  # Hide the root window
        self.is_dragging = False  # Track dragging state

        # Create the floating triangle
        self.create_floating_triangle()

    def create_floating_triangle(self):
        """
        Creates a floating triangle icon with click and drag functionality.
        """
        self.triangle_window = tk.Toplevel(self.root)
        self.triangle_window.overrideredirect(1)  # Remove window borders
        self.triangle_window.geometry("40x40+10+10")  # Initial position
        self.triangle_window.attributes("-topmost", True)  # Always on top

        # Canvas for the triangle icon
        self.canvas = tk.Canvas(self.triangle_window, width=40, height=40, bg="white", highlightthickness=0)
        self.canvas.pack()

        # Draw the triangle
        self.triangle = self.canvas.create_polygon(10, 30, 20, 10, 30, 30, fill="darkgreen", outline="white")

        # Bind events
        self.canvas.bind("<ButtonPress-1>", self.start_drag)
        self.canvas.bind("<B1-Motion>", self.move_triangle)
        self.canvas.bind("<ButtonRelease-1>", self.end_drag)

    def start_drag(self, event):
        """
        Starts tracking the drag operation.
        """
        self.is_dragging = False

    def move_triangle(self, event):
        """
        Moves the floating triangle.
        """
        x = self.triangle_window.winfo_pointerx() - 20
        y = self.triangle_window.winfo_pointery() - 20
        self.triangle_window.geometry(f"+{x}+{y}")
        self.is_dragging = True

    def end_drag(self, event):
        """
        Ends the drag operation and checks if the editor window should open.
        """
        if not self.is_dragging:
            self.expand_editor_window()

    def expand_editor_window(self):
        """
        Expands the editor window with context menu options.
        """
        editor = tk.Toplevel(self.root)
        editor.title("Editor Window")
        editor.geometry("800x600")

        # Add context menu
        menu = Menu(editor, tearoff=0)
        menu.add_command(label="Enable Diagnostics", command=self.open_code_scanner)
        menu.add_command(label="Toggle View (Text/Diagram)", command=lambda: self.toggle_view(editor))
        menu.add_separator()
        menu.add_command(label="Settings", command=self.open_settings)

        # Bind right-click to open context menu
        editor.bind("<Button-3>", lambda event: menu.post(event.x_root, event.y_root))

        # Default view
        self.show_text_view(editor)

    def toggle_view(self, parent):
        """
        Toggles between text and diagram views.
        """
        for widget in parent.winfo_children():
            widget.destroy()

        current_view = getattr(self, "current_view", "text")
        if current_view == "text":
            self.show_diagram_view(parent)
            self.current_view = "diagram"
        else:
            self.show_text_view(parent)
            self.current_view = "text"

    def show_text_view(self, parent):
        """
        Displays the text-based editor view.
        """
        text_area = tk.Text(parent, wrap="none", font=("Courier", 12))
        text_area.pack(fill="both", expand=True)

    def show_diagram_view(self, parent):
        """
        Displays the diagram-based view.
        """
        diagram_label = tk.Label(parent, text="[Diagram Placeholder]", font=("Arial", 16), bg="white")
        diagram_label.pack(fill="both", expand=True)

    def open_code_scanner(self):
        """
        Opens a transparent window for code scanning.
        """
        scanner = tk.Toplevel(self.root)
        scanner.title("Code Scanner")
        scanner.geometry("400x300+100+100")
        scanner.attributes("-alpha", 0.8)  # Transparency
        scanner.configure(bg="black")
        scanner.attributes("-topmost", True)

        # Resizable border frame
        label = tk.Label(scanner, text="Drag to scan code", fg="white", bg="black", font=("Arial", 12))
        label.pack(fill="both", expand=True)

    def open_settings(self):
        """
        Placeholder for future settings functionality.
        """
        print("Settings feature coming soon!")

    def run(self):
        """
        Runs the main application loop.
        """
        self.root.mainloop()


# Run the UI
if __name__ == "__main__":
    CodexNexusUI().run()