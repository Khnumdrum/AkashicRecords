import numpy as np

def logarithmic_inversion(data):
    return np.log(data, where=data > 0)

def exponential_decay_inversion(data):
    return np.exp(-data)

def thresholding_inversion(data, threshold=1):
    return np.where(data > threshold, 1, data)

def power_law_inversion(data, exponent=0.5):
    return np.power(data, exponent)

def feedback_loop(data, iterations=10, weight=0.9):
    results = [data]
    for _ in range(iterations):
        data = weight * data + (1 - weight) * np.mean(data)
        results.append(data)
    return np.array(results)

def alternating_pattern(data, iterations=10, factor=1.1):
    results = [data]
    for _ in range(iterations):
        data = data * factor
        results.append(data)
    return np.array(results)

def process_data(data, iterations=10):
    log_inv = logarithmic_inversion(data)
    exp_inv = exponential_decay_inversion(data)
    thresh_inv = thresholding_inversion(data)
    power_inv = power_law_inversion(data)
    
    feedback_results = feedback_loop(data, iterations)
    alternating_results = alternating_pattern(data, iterations)
    
    final_output = alternating_results[-1]
    
    return {
        "Original Data": data,
        "Logarithmic Inversion": log_inv,
        "Exponential Decay Inversion": exp_inv,
        "Thresholding Inversion": thresh_inv,
        "Power Law Inversion": power_inv,
        "Feedback Loop": feedback_results,
        "Alternating Pattern": alternating_results,
        "Final Processed Data": final_output
    }

if __name__ == "__main__":
    # Example test data
    data = np.array([9, 6, 3, 6, 9])
    iterations = 10
    results = process_data(data, iterations)
    
    # Display results
    for key, value in results.items():
        print(f"{key}: {value}")

